#!/usr/bin/env perl

=head1 NAME

freebox - Plugin for monitoring Freebox parameters.

=head1 APPLICABLE SYSTEMS

Any computer that has access to a Freebox v6. Perl module L<WWW::FBX>
is required for this plugin to function and can be installed from CPAN.

=head1 CONFIGURATION

 cp freebox_ /etc/munin/plugins

 cd /etc/munin/plugins
 ln -s freebox_ freebox_bandwidth
 ln -s freebox_ freebox_freeplug
 ln -s freebox_ freebox_temp
 ln -s freebox_ freebox_switch1   # to monitor port 1 of switch

If you want to use a multi graph, simply

 ln -s freebox_ freebox_multi

In multi mode, the script will be called only once to display bandwidth, freeplug, temp and the 4 switch ports.


Now auto configure. This will request app_token and track_id from the Freebox itself.

 munin-run --debug freebox_bandwidth autoconf

Add a freebox section in /etc/munin/plugin-conf.d/munin-node with values provided

    [freebox_*]
    env.app_token value-of-the-token
    env.track_id value-of-the-track_id

Check everything is working with

 munin-run --debug freebox_bandwidth
 munin-run --debug freebox_freeplug
 munin-run --debug freebox_temp
 munin-run --debug freebox_switch1

=head1 USAGE

This is a wildcard plugin which can be used to monitor several different
families of Freebox parameters. Run it with C<suggest> command line argument
to see all the possible operation modes and create a symlink called
C<freebox_mode> to this plugin from the Munin plugins directory, e.g.
C<freebox_temp>.

=head1 AUTHORS

Copyright 2014 Vadim Zeitlin <vz-cpan@zeitlins.org>

Modified by Laurent Kislaire

=head1 LICENSE

GPLv2

=head1 HISTORY

=over 4

=item 2014-07-19 Initial version.

=item 2016-05-11 Modified.

=back

=head1 MAGIC MARKERS

 #%# family=manual
 #%# capabilities=autoconf suggest

=cut

use strict;
use warnings;
use Munin::Plugin;

my ($app_id, $app_name, $app_version, $device_name) = ('org.munin.plugin.freebox', 'Munin Freebox plugin', '2.0', 'PC');

sub get_freebox {
    if (!defined($ENV{app_token})) {
        die <<EOF
Please autoconf the plugin and fill in your configuration app_token
    [freebox_*]
    env.app_token   value-of-the-token
    env.track_id    value-of-track-id

to use this plugin.
EOF
    }
    use WWW::FBX;
    WWW::FBX->new(
                app_id => $app_id,
                app_name => $app_name,
                app_version => $app_version,
                device_name => $device_name,
                track_id => $ENV{track_id},
                app_token => $ENV{app_token},
            );
}


if (defined $ARGV[0] and $ARGV[0] eq 'autoconf') {
    my $error;
    eval {
        require WWW::FBX;
        require Scalar::Util;
        my $fbx=WWW::FBX->new(app_id=>$app_id,app_name=>$app_name,app_version=>$app_version,device_name=>$device_name);
        my $app_token = $fbx->app_token;
        my $track_id = $fbx->track_id;

        print <<EOF
Now configure a munin section as:
[freebox_*]
env.app_token $app_token
env.track_id $track_id
EOF
    };
    if ($error = $@) {
        $error = $error->error if Scalar::Util::blessed($error) and $error->isa('WWW::FBX::Error');
    }
    print $error ? "no ($error)\n" : "yes\n";
    exit 0
}


my @modes = ('temp', 'bandwidth', 'freeplug', 'snr', map{"switch$_"} 1..4, 'multi');
my $switch_port;

if (defined $ARGV[0] and $ARGV[0] eq 'suggest') {
    print "$_\n" for @modes;

    exit 0
}


if ($0 !~ /freebox_(.+)*$/ or !grep $1, @modes) {
    die "Must be called freebox_{" . join('|',@modes) . "}.\n"
}

my $mode = $1;

$switch_port = $1 if $0 =~ /freebox_switch(.*)/;

my %temps = (
        cpum => 'CPU (Marvell)',
        cpub => 'CPU (Broadcom)',
        sw   => 'switch',
    );

if (defined $ARGV[0] and $ARGV[0] eq 'config') {

    if ($mode eq 'temp' or $mode eq 'multi') {
        print "multigraph freebox_temp\n" if $mode eq 'multi';
        print "graph_args --base 1000 -l 0\n";
        print "graph_title Freebox temperatures\n";
        print "graph_vlabel degrees Celsius\n";
        print "graph_category freebox\n";

        for my $t (keys %temps) {
            print "$t.label $temps{$t}\n";
            print "$t.warning 80\n";
            print "$t.critical 90\n";
        }
    }
    if ($mode eq 'bandwidth' or $mode eq 'multi') {
        print "multigraph freebox_bandwidth\n" if $mode eq 'multi';
        print "graph_title Freebox bandwidth\n";
        print "graph_vlabel Byte / second\n";
        print "graph_category freebox\n";

        for my $what (qw(bandwidth rate)) {
            for my $dir (qw(up down)) {
                print "${what}_${dir}.label $what $dir\n"
            }
        }
    }
    if ($mode =~ /^switch/ or $mode eq 'multi') {
        for my $switch ( $mode eq 'multi' ? (1..4):($switch_port) ) {
            print "multigraph freebox_switch_$switch\n" if $mode eq 'multi';
            print "graph_title Freebox port $switch\n";
            print "graph_vlabel Byte / second\n";
            print "switch_rx.label RX rate\n";
            print "switch_tx.label TX rate\n";
            print "graph_category freebox\n";
        }
    }
    if ($mode eq 'snr' or $mode eq 'multi') {
        print "multigraph freebox_snr\n" if $mode eq 'multi';
        print "graph_title Freebox Signal Noise Ratio\n";
        print "graph_vlabel dB\n";

        print "snr_up.label SNR up\n";
        print "snr_down.label SNR down\n";
        print "graph_category freebox\n";
    }
    if ($mode eq 'freeplug' or $mode eq 'multi') {
        print "multigraph freebox_freeplug\n" if $mode eq 'multi';
        print "graph_title Freeplugs connection speed\n";
        print "graph_vlabel Mbit / second\n";

        my $fps = get_freebox->freeplugs_net->[0]->{members};

        # Take just the stations as coordinator freeplugs don't have tx/rx stats.
        my @stations = grep { $_->{net_role} eq 'sta' } @$fps;

        if (@stations <= 1) {
            print "freeplug_rx.label receive speed\n";
            print "freeplug_tx.label transmit speed\n";
        } else {
            # If we have more than one station, number them to allow
            # distinguishing between them.
            for (my $fpnum = 1; $fpnum <= @stations; $fpnum++) {
                print "freeplug${fpnum}_rx.label receive speed for station $fpnum\n";
                print "freeplug${fpnum}_tx.label transmit speed for station $fpnum\n";
            }
        }
        print "graph_category freebox\n";
    }

    exit 0
}

sub put_val {
    my ($fb, $what) = @_;
    if ($what eq 'temp') {
        my $sc = $fb->system;
        for my $t (keys %temps) {
            print "$t.value " . $sc->{"temp_$t"} . "\n";
        }
    } elsif ($what eq 'bandwidth') {
        my $cs = $fb->connection;
        for my $dir (qw(up down)) {
            print "rate_$dir.value " . $cs->{"rate_$dir"} . "\n";

            # Those are in bit/s, translate to bytes.
            print "bandwidth_$dir.value " . $cs->{"bandwidth_$dir"}/8 . "\n";
        }
    } elsif ($what eq 'snr') {
        my $xs = $fb->connection_xdsl;
        print "snr_up.value " . $xs->{up}{snr_10}/10 . "\n";
        print "snr_down.value " . $xs->{down}{snr_10}/10 . "\n";
    } elsif ($what =~ /^switch/) {
        my $switch_n;
        if ( $mode eq 'multi' ) {
            $switch_n = $1 if $what =~ /switch_(.*)/;
        } else {
            $switch_n = $switch_port;
        }
        my $ss = $fb->switch_port("$switch_n/stats");
        print "switch_rx.value " . $ss->{rx_bytes_rate} . "\n";
        print "switch_tx.value " . $ss->{tx_bytes_rate} . "\n";
    } elsif ($what eq 'freeplug') {
        GET_FREEPLUGS: {
            my $fps = $fb->freeplugs_net->[0]{members};

            my @stations = grep { $_->{net_role} eq 'sta' } @$fps;

            last if !@stations;

            # Freeplug stats are invalid if it's not used, so query it once
            # again if it was inactive for some time, this is typically enough
            # to wake it up and get something meaningful from it.
            my $fp = $stations[0];
            redo GET_FREEPLUGS if $fp->{rx_rate} == -1 or $fp->{tx_rate} == -1;

            if (@stations == 1) {
                print "freeplug_rx.value " . $fp->{rx_rate} . "\n";
                print "freeplug_tx.value " . $fp->{tx_rate} . "\n";
            } else {
                my $fpnum = 1;
                for $fp (@stations) {
                    print "freeplug${fpnum}_rx.value " . $fp->{rx_rate} . "\n";
                    print "freeplug${fpnum}_tx.value " . $fp->{tx_rate} . "\n";

                    $fpnum++;
                }
            }
        }
    } elsif ($what eq 'multi') {
        for my $graph ( qw/ temp bandwidth snr freeplug switch_1 switch_2 switch_3 switch_4 / ) {
            print "multigraph freebox_$graph\n";
            put_val($fb, $graph);
        }

    }
}

die "Usage: $0 [autoconf|config]\n" if @ARGV;

my $fb = get_freebox;
put_val($fb, $mode);

exit 0
